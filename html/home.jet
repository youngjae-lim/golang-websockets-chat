<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6"
      crossorigin="anonymous"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.css"
      integrity="sha512-UrjLcAek5jbj1vwGbXkviPHtgSNVNQCedX7cBIMDdSI2iZtUcZcoTh2Sqc8R9mVcijOjFUi1IlxhfrE1uWaIog=="
      crossorigin="anonymous"
    />
    <style>
      .chatbox {
        outline: 1px solid silver;
        min-height: 160px;
        padding: 0.5em;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="row">
        <div class="col">
          <h1 class="mt-3">This is Home Page.</h1>
        </div>
      </div>
      <div class="row">
        <div class="col-md-8">
          <h3 class="mt-3">Chat</h3>
          <p><a href="https://github.com">Go to Github.com</a></p>
          <div class="form-group">
            <label for="username">Username:</label>
            <input
              type="text"
              name="username"
              id="username"
              class="form-control"
              autocomplete="off"
            />
          </div>
          <div class="form-group">
            <label for="message">Message:</label>
            <input
              type="text"
              name="message"
              id="message"
              class="form-control"
              autocomplete="off"
            />
          </div>
          <hr />
          <a
            href="javascript:void(0)"
            class="btn btn-outline-secondary"
            id="sendBtn"
            >Send Message</a
          >

          <input type="hidden" name="action" id="action" />
          <hr />
          <div id="chat_output" class="chatbox"></div>
        </div>
        <div class="col-md-4">
          <h3 class="mt-3">Who's online?</h3>
          <ul id="online_users"></ul>
        </div>
      </div>
    </div>
  </body>

  <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-JEW9xMcG8R+pH31jmWH6WWP0WintQrMb4s7ZOdauHnUtxwoG2vI5DkLtS3qm9Ekf"
    crossorigin="anonymous"
  ></script>
  <script
    src="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.js"
    integrity="sha512-NHRCwRf2LnVSlLDejCA9oS3fG3/FLSQIPCjAWl3M7tVi5wszwr6FxkjotWnQDXLE+aLKcxRrzFDNEgXj9nvkPw=="
    crossorigin="anonymous"
  ></script>
  <script src="/static/reconnecting-websocket.min.js"></script>

  <script>
    let socket = null
    let chatOutput = document.getElementById('chat_output')
    let userField = document.getElementById('username')
    let messageField = document.getElementById('message')
    let sendMsgBtn = document.getElementById('sendBtn')

    window.onbeforeunload = function () {
      console.log('Leaving...')
      let jsonData = {}
      jsonData['action'] = 'left'
      socket.send(JSON.stringify(jsonData))
    }

    document.addEventListener('DOMContentLoaded', function () {
      socket = new ReconnectingWebSocket('ws://127.0.0.1:8080/ws', null, {
        debug: true,
        reconnectInterval: 3000,
      })

      socket.onopen = () => {
        console.log('Succesfully connected!')
      }

      socket.onclose = () => {
        console.log('Connection closed!')
      }

      socket.onerror = () => {
        console.log('there was an error!')
      }

      socket.onmessage = (msg) => {
        console.log(msg)

        let data = JSON.parse(msg.data)
        console.log('Action is', data.action)

        switch (data.action) {
          case 'list_users':
            let ul = document.getElementById('online_users')
            while (ul.firstChild) ul.removeChild(ul.firstChild)

            if (data.connected_users.length > 0) {
              data.connected_users.forEach(function (user) {
                let li = document.createElement('li')
                li.appendChild(document.createTextNode(user))
                ul.appendChild(li)
              })
            }
            break

          case 'broadcast':
            chatOutput.innerHTML = chatOutput.innerHTML + data.message + '<br>'
            break
        }
      }

      // A client inputs a username in the Username field and an event listener sends it to the socket
      userField.addEventListener('change', function () {
        let jsonData = {}
        jsonData['action'] = 'username'
        jsonData['username'] = this.value
        socket.send(JSON.stringify(jsonData))
      })

      // A client writes a message in the Message filed and an event listener sends it to the socket upon hitting "Enter" key
      messageField.addEventListener('keydown', function (event) {
        if (event.code === 'Enter') {
          if (!socket) {
            console.log('No connection!')
            return false
          }

          if (userField.value === '' || messageField === '') {
            errorMessage('Fill out your username and message!!')
            return false
          } else {
            sendMessage()
          }

          event.preventDefault()
          event.stopPropagation()
        }
      })

      sendMsgBtn.addEventListener('click', function (event) {
        if (userField.value === '' || messageField === '') {
          errorMessage('Fill out your username and message!!')
          return false
        } else {
          sendMessage()
        }
      })
    })

    function sendMessage() {
      let jsonData = {}
      jsonData['action'] = 'broadcast'
      jsonData['username'] = userField.value
      jsonData['message'] = messageField.value
      socket.send(JSON.stringify(jsonData))
      messageField.value = ''
    }

    function errorMessage(msg) {
      notie.alert({
        type: 'error',
        text: msg,
        //stay: Boolean, // optional, default = false
        //time: Number, // optional, default = 3, minimum = 1,
        //position: String // optional, default = 'top', enum: ['top', 'bottom']
      })
    }
  </script>
</html>
